{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/mint/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport raffleFrens from './utils/RaffleFrens.json';\nimport { ethers } from \"ethers\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\";\nconst MINT_AMOUNT = \"1\";\n\nconst App = () => {\n  _s();\n\n  /*\n  * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\n  * Gotta make sure this is async.\n  */\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object sir/maam\", ethereum);\n    }\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    /*\n    * User can have multiple authorized accounts, we grab the first one if its there!\n    */\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n  * Implement your connectWallet method here\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * Fancy method to request access to account.\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\n      *  This should print out public address once we authorize Metamask.\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, raffleFrens.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, raffleFrens.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintFren(1, {\n          gasPrice: ethers.utils.parseUnits('1', 'gwei'),\n          gasLimit: 253578,\n          value: ethers.utils.parseEther(\"0.010000\")\n        });\n        let chainId = await ethereum.request({\n          method: 'eth_chainId'\n        });\n        console.log(\"Connected to chain \" + chainId); // String, hex code of the chainId of the Rinkebey test network (Change to 0x1 for mainnet)\n\n        const rinkebyChainId = \"0x4\";\n\n        if (chainId !== rinkebyChainId) {\n          alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Click to Connect your Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n  /*\n  * This runs our function when the page loads.\n  */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Nate Hallinan x Real Smurf Cat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Each Ownable.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slideshow-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mySlides fade\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"numbertext\",\n              children: \"1 / 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"../assets/ImageSlider/1.jpg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text\",\n              children: \"Caption Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mySlides fade\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"numbertext\",\n              children: \"2 / 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"img2.jpg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"text\",\n              children: \"Caption Two\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mySlides fade\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"numbertext\",\n              children: \"3 / 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"img3.jpg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"text\",\n              children: \"Caption Three\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: ` Twitter @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/charles/Desktop/mint/src/App.js"],"names":["React","useEffect","useState","raffleFrens","ethers","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","MINT_AMOUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","mintFren","gasPrice","utils","parseUnits","gasLimit","value","parseEther","chainId","rinkebyChainId","wait","hash","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport raffleFrens from './utils/RaffleFrens.json'\nimport { ethers } from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\";\nconst MINT_AMOUNT = \"1\";\n\nconst App = () => {\n\n  /*\n  * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  /*\n  * Gotta make sure this is async.\n  */\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n    } else {\n        console.log(\"We have the ethereum object sir/maam\", ethereum);\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    /*\n    * User can have multiple authorized accounts, we grab the first one if its there!\n    */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      /*\n      *  This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, raffleFrens.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const askContractToMintNft = async () => {\n    \n  \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, raffleFrens.abi, signer);\n  \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mintFren(1, {gasPrice: ethers.utils.parseUnits('1', 'gwei'), gasLimit: 253578, value: ethers.utils.parseEther(\"0.010000\")});\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(\"Connected to chain \" + chainId);\n\n        // String, hex code of the chainId of the Rinkebey test network (Change to 0x1 for mainnet)\n        const rinkebyChainId = \"0x4\"; \n        if (chainId !== rinkebyChainId) {\n\t        alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n      \n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Click to Connect your Wallet\n    </button>\n  );\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  })\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Nate Hallinan x Real Smurf Cat</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Each Ownable.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n{/* <!-- Slideshow container --> */}\n<div className=\"slideshow-container\">\n\n  {/* <!-- Full-width images with number and caption text --> */}\n  <div className=\"mySlides fade\">\n    <div className=\"numbertext\">1 / 3</div>\n    <img src=\"../assets/ImageSlider/1.jpg\"/>\n    <div className=\"text\">Caption Text</div>\n  </div>\n\n  <div class=\"mySlides fade\">\n    <div class=\"numbertext\">2 / 3</div>\n    <img src=\"img2.jpg\"/>\n    <div class=\"text\">Caption Two</div>\n  </div>\n\n  <div class=\"mySlides fade\">\n    <div class=\"numbertext\">3 / 3</div>\n    <img src=\"img3.jpg\"/>\n    <div class=\"text\">Caption Three</div>\n  </div>\n</div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{` Twitter @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}