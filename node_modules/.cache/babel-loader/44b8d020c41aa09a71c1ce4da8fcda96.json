{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/mint/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport raffleFrens from './utils/RaffleFrens.json';\nimport userPositionContractAbi from './utils/UserPositionContract.json'; // Import ABI for the user position contract\n\nimport { ethers } from \"ethers\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\nconst TOTAL_MINT_COUNT = 50;\nconst NFT_COLLECTION_CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\";\nconst USER_POSITION_CONTRACT_ADDRESS = \"0xfF836A5821E69066c87E268bC51b849FaB94240C\";\nconst MINT_AMOUNT = \"1\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [userPositionContractAddress, setUserPositionContractAddress] = useState(USER_POSITION_CONTRACT_ADDRESS);\n  const [userPosition, setUserPosition] = useState(null);\n\n  const fetchUserPosition = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const userPositionContract = new ethers.Contract(userPositionContractAddress, userPositionContractAbi, signer);\n        const position = await userPositionContract.getUserPosition(currentAccount);\n        setUserPosition(position.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account); // Fetch the user's position from the correct contract\n\n        fetchUserPosition(); // Setup listener! This is for the case where a user comes to our site\n        // and ALREADY had their wallet connected + authorized.\n\n        setupEventListener();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(NFT_COLLECTION_CONTRACT_ADDRESS, raffleFrens.abi, signer);\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${NFT_COLLECTION_CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(NFT_COLLECTION_CONTRACT_ADDRESS, raffleFrens.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintFren(1, {\n          gasPrice: ethers.utils.parseUnits('1', 'gwei'),\n          gasLimit: 253578,\n          value: ethers.utils.parseEther(\"0.010000\")\n        });\n        let chainId = await ethereum.request({\n          method: 'eth_chainId'\n        });\n        console.log(\"Connected to chain \" + chainId);\n        const rinkebyChainId = \"0x4\";\n\n        if (chainId !== rinkebyChainId) {\n          alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Nate Hallinan x Real Smurf Cat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Each Ownable.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Click to Connect your Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Your position in the holder list: \", userPosition]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: askContractToMintNft,\n            className: \"cta-button connect-wallet-button\",\n            children: \"Mint NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: ` Twitter @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"0Y3S0JT7WhnaIiAsXYEhTpV8HjA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/charles/Desktop/mint/src/App.js"],"names":["React","useEffect","useState","raffleFrens","userPositionContractAbi","ethers","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","NFT_COLLECTION_CONTRACT_ADDRESS","USER_POSITION_CONTRACT_ADDRESS","MINT_AMOUNT","App","currentAccount","setCurrentAccount","userPositionContractAddress","setUserPositionContractAddress","userPosition","setUserPosition","fetchUserPosition","ethereum","window","provider","providers","Web3Provider","signer","getSigner","userPositionContract","Contract","position","getUserPosition","toNumber","console","log","error","connectWallet","alert","accounts","request","method","setupEventListener","checkIfWalletIsConnected","length","account","connectedContract","abi","on","from","tokenId","askContractToMintNft","nftTxn","mintFren","gasPrice","utils","parseUnits","gasLimit","value","parseEther","chainId","rinkebyChainId","wait","hash","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport raffleFrens from './utils/RaffleFrens.json';\nimport userPositionContractAbi from './utils/UserPositionContract.json'; // Import ABI for the user position contract\nimport { ethers } from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\nconst TOTAL_MINT_COUNT = 50;\nconst NFT_COLLECTION_CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\";\nconst USER_POSITION_CONTRACT_ADDRESS = \"0xfF836A5821E69066c87E268bC51b849FaB94240C\";\nconst MINT_AMOUNT = \"1\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [userPositionContractAddress, setUserPositionContractAddress] = useState(USER_POSITION_CONTRACT_ADDRESS);\n  const [userPosition, setUserPosition] = useState(null);\n\n  const fetchUserPosition = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const userPositionContract = new ethers.Contract(userPositionContractAddress, userPositionContractAbi, signer);\n\n        const position = await userPositionContract.getUserPosition(currentAccount);\n        setUserPosition(position.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n\n        // Fetch the user's position from the correct contract\n        fetchUserPosition();\n\n        // Setup listener! This is for the case where a user comes to our site\n        // and ALREADY had their wallet connected + authorized.\n        setupEventListener();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(NFT_COLLECTION_CONTRACT_ADDRESS, raffleFrens.abi, signer);\n\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${NFT_COLLECTION_CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(NFT_COLLECTION_CONTRACT_ADDRESS, raffleFrens.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintFren(1, {gasPrice: ethers.utils.parseUnits('1', 'gwei'), gasLimit: 253578, value: ethers.utils.parseEther(\"0.010000\")});\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(\"Connected to chain \" + chainId);\n\n        const rinkebyChainId = \"0x4\";\n        if (chainId !== rinkebyChainId) {\n          alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Nate Hallinan x Real Smurf Cat</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Each Ownable.\n          </p>\n          {currentAccount === \"\" ? (\n            <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n              Click to Connect your Wallet\n            </button>\n          ) : (\n            <>\n              <p>Your position in the holder list: {userPosition}</p>\n              <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n                Mint NFT\n              </button>\n            </>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{` Twitter @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}