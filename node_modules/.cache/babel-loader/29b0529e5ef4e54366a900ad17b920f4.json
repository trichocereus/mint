{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/mint/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport './styles/Slider.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport smurfCat from './utils/smurfCat.json';\nimport { ethers } from \"ethers\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // const OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\n// const TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\"; // const MINT_AMOUNT = \"1\";\n\nconst App = () => {\n  _s();\n\n  /*\n  * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\n  * Another state variable to track whitelist status of current account\n  */\n\n  const [isWhitelisted, setIsWhitelisted] = useState(false);\n  /*\n  * Check if user's address is on whitelist\n  */\n\n  const checkIfWhitelisted = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum && currentAccount) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, smurfCat.abi, signer); // Replace 'isAddressWhitelisted' with your contract's whitelist checking function\n\n        const status = await connectedContract.isAddressWhitelisted(currentAccount);\n        setIsWhitelisted(status);\n      }\n    } catch (error) {\n      console.error(\"Error checking whitelist status\", error);\n    }\n  };\n  /*\n  * Gotta make sure this is async.\n  */\n\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object sir/maam\", ethereum);\n    }\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    /*\n    * User can have multiple authorized accounts, we grab the first one if its there!\n    */\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n  * Implement your connectWallet method here\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * Fancy method to request access to account.\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\n      *  This should print out public address once we authorize Metamask.\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, smurfCat.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, smurfCat.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintFren(1, {\n          gasPrice: ethers.utils.parseUnits('1', 'gwei'),\n          gasLimit: 253578,\n          value: ethers.utils.parseEther(\"0.010000\")\n        });\n        let chainId = await ethereum.request({\n          method: 'eth_chainId'\n        });\n        console.log(\"Connected to chain \" + chainId); // String, hex code of the chainId of the Rinkebey test network (Change to 0x1 for mainnet)\n\n        const rinkebyChainId = \"0x4\";\n\n        if (chainId !== rinkebyChainId) {\n          alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n  /*\n  * This runs our function when the page loads.\n  */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"title2\",\n            children: \"Nate Hallinan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"title3\",\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"title\",\n            children: \"Real Smurf Cat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slideshow\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slides\",\n            children: [/*#__PURE__*/_jsxDEV(\"section\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Nate Hallinan's genesis NFT collection. Free to qualifying \\u0448\\u0430\\u0439\\u043B\\u0443\\u0448\\u0430\\u0439 holders.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this) //   <button className=\"cta-button connect-wallet-button\">\n        //   Mint NFT\n        // </button>\n        ]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: \"https://free.timeanddate.com/countdown/i953fa6z/n202/cf11/cm0/cu4/ct0/cs1/ca0/co0/cr0/ss0/cacfff/cpc000/pct/tcfff/fn3/fs300/szw320/szh135/iso2023-12-12T12:00:00\",\n          allowtransparency: \"true\",\n          frameBorder: \"0\",\n          title: \"countdown\",\n          width: \"912\",\n          height: \"55\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"links-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"links\",\n          href: \"https://natehallinan.com/resume\",\n          children: \"About the artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"links\",\n          href: \"https://smurfcat.eth.limo\",\n          children: \"Token website\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cont2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"h-text\",\n          children: \"MINT SCHEDULE \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"(Wallet list and criteria for eligibility will be released on Monday, Dec 11 at 12PM PST) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"h-text\",\n          children: \"Phase 1 (3000 mints)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Who: Top 2000 holders based on 3 snapshots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Top 1000: 2 free mints \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Top 1001-2000: 1 free mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"When: Tuesday, Dec 12 at 12PM PST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Important: Mints will be guaranteed for at least 12 hours until Phase 2 starts \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"h-text\",\n          children: \"Phase 2 (Remainder of Phase 1 supply)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Who: In addition to the top 2000 wallets, the top 2001-2500 holders based on 3 snapshots will have a chance for 1 free mint until all 3000 mints are claimed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"When: Wednesday, Dec 13 at 12AM PST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"h-text\",\n          children: \"Phase 3 (300 mints @ 0.01 eth each) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Who: 330 Whitelisted addresses (10% oversubscribed due to high demand)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"When: Wednesday, Dec 13 at 12PM PST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"h-text\",\n          children: \"Reveal: 24 hours after collection is minted out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p-text\",\n          children: \"Happy holidays from Real Smurf Cat and Nate Hallinan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: ` Twitter @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Ua4rPJdaT12yuzeSK8OF50pyxZY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/charles/Desktop/mint/src/App.js"],"names":["React","useEffect","useState","smurfCat","ethers","TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","isWhitelisted","setIsWhitelisted","checkIfWhitelisted","ethereum","window","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","status","isAddressWhitelisted","error","console","checkIfWalletIsConnected","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","mintFren","gasPrice","utils","parseUnits","gasLimit","value","parseEther","chainId","rinkebyChainId","wait","hash","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport './styles/Slider.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport smurfCat from './utils/smurfCat.json'\nimport { ethers } from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\n// const TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\";\n// const MINT_AMOUNT = \"1\";\n\nconst App = () => {\n\n  /*\n  * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  /*\n  * Another state variable to track whitelist status of current account\n  */\n  const [isWhitelisted, setIsWhitelisted] = useState(false);\n\n  /*\n  * Check if user's address is on whitelist\n  */\n  const checkIfWhitelisted = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum && currentAccount) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, smurfCat.abi, signer);\n  \n        // Replace 'isAddressWhitelisted' with your contract's whitelist checking function\n        const status = await connectedContract.isAddressWhitelisted(currentAccount);\n        setIsWhitelisted(status);\n      }\n    } catch (error) {\n      console.error(\"Error checking whitelist status\", error);\n    }\n  };\n  \n  /*\n  * Gotta make sure this is async.\n  */\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n    } else {\n        console.log(\"We have the ethereum object sir/maam\", ethereum);\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    /*\n    * User can have multiple authorized accounts, we grab the first one if its there!\n    */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      /*\n      *  This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, smurfCat.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const askContractToMintNft = async () => {\n    \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, smurfCat.abi, signer);\n  \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mintFren(1, {gasPrice: ethers.utils.parseUnits('1', 'gwei'), gasLimit: 253578, value: ethers.utils.parseEther(\"0.010000\")});\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(\"Connected to chain \" + chainId);\n\n        // String, hex code of the chainId of the Rinkebey test network (Change to 0x1 for mainnet)\n        const rinkebyChainId = \"0x4\"; \n        if (chainId !== rinkebyChainId) {\n\t        alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n      \n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect Wallet\n    </button>\n  );\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  })\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <div className=\"title-container\">\n            <section className=\"title2\">Nate Hallinan</section>\n            <section className=\"title3\">x</section>\n            <section className=\"title\">Real Smurf Cat</section>\n          </div>\n          <div className=\"slideshow\">\n            <div className=\"slides\">\n                <section></section>\n                <section></section>\n                <section></section>\n                <section></section>\n                <section></section>\n            </div>\n          </div>\n          <p className=\"sub-text\">\n            Nate Hallinan's genesis NFT collection. Free to qualifying шайлушай holders.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          //   <button className=\"cta-button connect-wallet-button\">\n          //   Mint NFT\n          // </button>\n          )}\n        </div>\n        <div className=\"timer\">\n          <iframe src=\"https://free.timeanddate.com/countdown/i953fa6z/n202/cf11/cm0/cu4/ct0/cs1/ca0/co0/cr0/ss0/cacfff/cpc000/pct/tcfff/fn3/fs300/szw320/szh135/iso2023-12-12T12:00:00\" allowtransparency=\"true\" frameBorder=\"0\" title='countdown' width=\"912\" height=\"55\"></iframe>\n        </div>\n        <div className=\"links-container\">\n          <a className='links' href='https://natehallinan.com/resume'>About the artist</a>\n          <a className='links' href='https://smurfcat.eth.limo'>Token website</a>\n        </div>\n        <div className=\"cont2\">\n          <p className=\"h-text\">MINT SCHEDULE </p>\n          <p className=\"p-text\">(Wallet list and criteria for eligibility will be released on Monday, Dec 11 at 12PM PST) </p>\n          <p className=\"h-text\">Phase 1 (3000 mints)</p>\n          <p className=\"p-text\">Who: Top 2000 holders based on 3 snapshots</p>\n          <p className=\"p-text\">Top 1000: 2 free mints </p>\n          <p className=\"p-text\">Top 1001-2000: 1 free mint</p>\n          <p className=\"p-text\">When: Tuesday, Dec 12 at 12PM PST</p>\n          <p className=\"p-text\">Important: Mints will be guaranteed for at least 12 hours until Phase 2 starts </p>\n          <p className=\"h-text\">Phase 2 (Remainder of Phase 1 supply)</p>\n          <p className=\"p-text\">Who: In addition to the top 2000 wallets, the top 2001-2500 holders based on 3 snapshots will have a chance for 1 free mint until all 3000 mints are claimed</p>\n          <p className=\"p-text\">When: Wednesday, Dec 13 at 12AM PST</p>\n          <p className=\"h-text\">Phase 3 (300 mints @ 0.01 eth each) </p>\n          <p className=\"p-text\">Who: 330 Whitelisted addresses (10% oversubscribed due to high demand)</p>\n          <p className=\"p-text\">When: Wednesday, Dec 13 at 12PM PST</p>\n          <p className=\"h-text\">Reveal: 24 hours after collection is minted out</p>\n          <p className=\"p-text\">Happy holidays from Real Smurf Cat and Nate Hallinan!</p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{` Twitter @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}