{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/mint/src/components/Eligible.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Eligible } from \"../utils/eligible.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckEligibility = () => {\n  _s();\n\n  const eligibleList1 = Eligible(\"./utils/eligibleList1.txt\");\n  const eligibleList2 = Eligible(\"./utils/eligibleList2.txt\");\n  const eligibleList3 = Eligible(\"./utils/eligibleList3.txt\");\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [resultMessage, setResultMessage] = useState(\"\");\n\n  const handleCheckEligibility = () => {\n    if (eligibleList1.includes(userAddress)) {\n      setResultMessage(\"User's address is in Eligible List 1.\");\n    } else if (eligibleList2.includes(userAddress)) {\n      setResultMessage(\"User's address is in Eligible List 2.\");\n    } else if (eligibleList3.includes(userAddress)) {\n      setResultMessage(\"User's address is in Eligible List 3.\");\n    } else {\n      setResultMessage(\"User's address is not in any eligible list.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userAddress,\n      onChange: e => setUserAddress(e.target.value),\n      placeholder: \"Enter Ethereum address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCheckEligibility,\n      children: \"Check Eligibility\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), resultMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: resultMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckEligibility, \"T2TQDo/ii5DP2YG1/jBe++Q7T6s=\");\n\n_c = CheckEligibility;\nexport default CheckEligibility;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckEligibility\");","map":{"version":3,"sources":["/Users/charles/Desktop/mint/src/components/Eligible.js"],"names":["React","useState","Eligible","CheckEligibility","eligibleList1","eligibleList2","eligibleList3","userAddress","setUserAddress","resultMessage","setResultMessage","handleCheckEligibility","includes","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,sBAAzB;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,aAAa,GAAGF,QAAQ,CAAC,2BAAD,CAA9B;AACA,QAAMG,aAAa,GAAGH,QAAQ,CAAC,2BAAD,CAA9B;AACA,QAAMI,aAAa,GAAGJ,QAAQ,CAAC,2BAAD,CAA9B;AAEA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAMU,sBAAsB,GAAG,MAAM;AACnC,QAAIP,aAAa,CAACQ,QAAd,CAAuBL,WAAvB,CAAJ,EAAyC;AACvCG,MAAAA,gBAAgB,CAAC,uCAAD,CAAhB;AACD,KAFD,MAEO,IAAIL,aAAa,CAACO,QAAd,CAAuBL,WAAvB,CAAJ,EAAyC;AAC9CG,MAAAA,gBAAgB,CAAC,uCAAD,CAAhB;AACD,KAFM,MAEA,IAAIJ,aAAa,CAACM,QAAd,CAAuBL,WAAvB,CAAJ,EAAyC;AAC9CG,MAAAA,gBAAgB,CAAC,uCAAD,CAAhB;AACD,KAFM,MAEA;AACLA,MAAAA,gBAAgB,CAAC,6CAAD,CAAhB;AACD;AACF,GAVD;;AAYA,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEH,WAFT;AAGE,MAAA,QAAQ,EAAGM,CAAD,IAAOL,cAAc,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAHjC;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAQ,MAAA,OAAO,EAAEJ,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAQGF,aAAa,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YARpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhCD;;GAAMN,gB;;KAAAA,gB;AAkCN,eAAeA,gBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Eligible } from \"../utils/eligible.js\";\n\nconst CheckEligibility = () => {\n  const eligibleList1 = Eligible(\"./utils/eligibleList1.txt\");\n  const eligibleList2 = Eligible(\"./utils/eligibleList2.txt\");\n  const eligibleList3 = Eligible(\"./utils/eligibleList3.txt\");\n\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [resultMessage, setResultMessage] = useState(\"\");\n\n  const handleCheckEligibility = () => {\n    if (eligibleList1.includes(userAddress)) {\n      setResultMessage(\"User's address is in Eligible List 1.\");\n    } else if (eligibleList2.includes(userAddress)) {\n      setResultMessage(\"User's address is in Eligible List 2.\");\n    } else if (eligibleList3.includes(userAddress)) {\n      setResultMessage(\"User's address is in Eligible List 3.\");\n    } else {\n      setResultMessage(\"User's address is not in any eligible list.\");\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={userAddress}\n        onChange={(e) => setUserAddress(e.target.value)}\n        placeholder=\"Enter Ethereum address\"\n      />\n      <button onClick={handleCheckEligibility}>Check Eligibility</button>\n      {resultMessage && <p>{resultMessage}</p>}\n    </div>\n  );\n};\n\nexport default CheckEligibility;\n"]},"metadata":{},"sourceType":"module"}