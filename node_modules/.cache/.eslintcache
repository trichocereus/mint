[{"/Users/charles/Desktop/mint/src/index.js":"1","/Users/charles/Desktop/mint/src/App.js":"2"},{"size":226,"mtime":1701460078101,"results":"3","hashOfConfig":"4"},{"size":7351,"mtime":1701754896153,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"69mil",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/charles/Desktop/mint/src/index.js",[],["12","13"],"/Users/charles/Desktop/mint/src/App.js",["14","15","16","17","18"],"import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport './styles/Slider.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport raffleFrens from './utils/RaffleFrens.json'\nimport { ethers } from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = 'smurfcateth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets/';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x2B778f7CEa3f920242Ab6a42B828EE633b70E96D\";\nconst MINT_AMOUNT = \"1\";\n\nconst App = () => {\n\n  /*\n  * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  /*\n  * Gotta make sure this is async.\n  */\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n    } else {\n        console.log(\"We have the ethereum object sir/maam\", ethereum);\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    /*\n    * User can have multiple authorized accounts, we grab the first one if its there!\n    */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      /*\n      *  This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, raffleFrens.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"newFrenMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const askContractToMintNft = async () => {\n    \n  \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, raffleFrens.abi, signer);\n  \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mintFren(1, {gasPrice: ethers.utils.parseUnits('1', 'gwei'), gasLimit: 253578, value: ethers.utils.parseEther(\"0.010000\")});\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(\"Connected to chain \" + chainId);\n\n        // String, hex code of the chainId of the Rinkebey test network (Change to 0x1 for mainnet)\n        const rinkebyChainId = \"0x4\"; \n        if (chainId !== rinkebyChainId) {\n\t        alert(\"You are not connected to the Rinkeby Test Network!\");\n        }\n\n      \n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect Wallet\n    </button>\n  );\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  })\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <div className=\"title-container\">\n            <section className=\"title2\">Nate Hallinan</section>\n            <section className=\"title3\">x</section>\n            <section className=\"title\">Real Smurf Cat</section>\n          </div>\n          <div className=\"slideshow\">\n            <div className=\"slides\">\n                <section></section>\n                <section></section>\n                <section></section>\n                <section></section>\n                <section></section>\n            </div>\n          </div>\n          <p className=\"sub-text\">\n            Nate Hallinan's genesis NFT collection. Free to qualifying шайлушай holders.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            // <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n            //   Mint NFT\n            // </button>\n            <button className=\"cta-button connect-wallet-button\">\n            Mint NFT\n          </button>\n\n          )}\n        </div>\n        <div className=\"timer\">\n          <iframe src=\"https://free.timeanddate.com/countdown/i953fa6z/n202/cf11/cm0/cu4/ct0/cs1/ca0/co0/cr0/ss0/cacfff/cpc000/pct/tcfff/fn3/fs300/szw320/szh135/iso2023-12-12T12:00:00\" allowtransparency=\"true\" frameborder=\"0\" width=\"912\" height=\"55\"></iframe>\n        </div>\n        <div className=\"links-container\">\n          <a className='links' href='https://natehallinan.com/resume'>About the artist</a>\n          <a className='links' href='https://smurfcat.eth.limo'>Token website</a>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{` Twitter @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":11,"column":7,"nodeType":"25","messageId":"26","endLine":11,"endColumn":19},{"ruleId":"23","severity":1,"message":"27","line":12,"column":7,"nodeType":"25","messageId":"26","endLine":12,"endColumn":23},{"ruleId":"23","severity":1,"message":"28","line":14,"column":7,"nodeType":"25","messageId":"26","endLine":14,"endColumn":18},{"ruleId":"23","severity":1,"message":"29","line":119,"column":9,"nodeType":"25","messageId":"26","endLine":119,"endColumn":29},{"ruleId":"30","severity":1,"message":"31","line":203,"column":11,"nodeType":"32","endLine":203,"endColumn":251},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'OPENSEA_LINK' is assigned a value but never used.","Identifier","unusedVar","'TOTAL_MINT_COUNT' is assigned a value but never used.","'MINT_AMOUNT' is assigned a value but never used.","'askContractToMintNft' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]